/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // JACACO!
    id 'jacoco'
    // CODENARC!
    id 'codenarc'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.13'

    implementation 'org.slf4j:slf4j-log4j12:2.0.6'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'org.objenesis:objenesis:3.3'
}

application {
    // Define the main class for the application.
    mainClass = 'com.github.jvalentino.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// JACACO!
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco.excludes = ['**/*$*_closure*']
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: ['**/*$*_closure*'])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                //minimum = 0.80
            }
        }
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

// CODENARC!
codenarcTest.enabled = false

task codenarcConsoleReport {
    doLast {
        println file("${codenarc.reportsDir}/main.txt").text
    }
}

codenarcMain {
    finalizedBy codenarcConsoleReport
    reports {
        text.enabled = true
        html.enabled = true
    }
}
